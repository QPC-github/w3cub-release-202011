app.DOC = {"name":"jq","slug":"jq","type":"jq","links":{"home":"https://stedolan.github.io/jq/"},"release":"1.6","mtime":1622487086,"db_size":154279};
app.INDEXDOC = {"entries":[{"name":"$ENV, env","path":"index#$ENV,env","type":"Builtin operators and functions"},{"name":"$__loc__","path":"index#$__loc__","type":"Builtin operators and functions"},{"name":".[]?","path":"index#.[]?","type":"Basic filters"},{"name":"==, !=","path":"index#==,!=","type":"Conditionals and Comparisons"},{"name":">, >=, <=, <","path":"index#>,>=,<=,<","type":"Conditionals and Comparisons"},{"name":"add","path":"index#add","type":"Builtin operators and functions"},{"name":"Addition: +","path":"index#Addition:+","type":"Builtin operators and functions"},{"name":"all, all(condition), all(generator; condition)","path":"index#all,all(condition),all(generator;condition)","type":"Builtin operators and functions"},{"name":"Alternative operator: //","path":"index#Alternativeoperator://","type":"Conditionals and Comparisons"},{"name":"and/or/not","path":"index#and/or/not","type":"Conditionals and Comparisons"},{"name":"any, any(condition), any(generator; condition)","path":"index#any,any(condition),any(generator;condition)","type":"Builtin operators and functions"},{"name":"Arithmetic update-assignment: +=, -=, *=, /=, %=, //=","path":"index#Arithmeticupdate-assignment:+=,-=,*=,/=,%=,//=","type":"Assignment"},{"name":"Array construction: []","path":"index#Arrayconstruction:[]","type":"Types and Values"},{"name":"Array Index: .[2]","path":"index#ArrayIndex:.[2]","type":"Basic filters"},{"name":"Array/Object Value Iterator: .[]","path":"index#Array/ObjectValueIterator:.[]","type":"Basic filters"},{"name":"Array/String Slice: .[10:15]","path":"index#Array/StringSlice:.[10:15]","type":"Basic filters"},{"name":"arrays, objects, iterables, booleans, numbers, normals, finites, strings, nulls, values, scalars","path":"index#arrays,objects,iterables,booleans,numbers,normals,finites,strings,nulls,values,scalars","type":"Builtin operators and functions"},{"name":"ascii_downcase, ascii_upcase","path":"index#ascii_downcase,ascii_upcase","type":"Builtin operators and functions"},{"name":"Breaking out of control structures","path":"index#Breakingoutofcontrolstructures","type":"Conditionals and Comparisons"},{"name":"bsearch(x)","path":"index#bsearch(x)","type":"Builtin operators and functions"},{"name":"builtins","path":"index#builtins","type":"Builtin operators and functions"},{"name":"capture(val), capture(regex; flags)","path":"index#capture(val),capture(regex;flags)","type":"Regular expressions (PCRE)"},{"name":"combinations, combinations(n)","path":"index#combinations,combinations(n)","type":"Builtin operators and functions"},{"name":"Comma: ,","path":"index#Comma:,","type":"Basic filters"},{"name":"Complex assignments","path":"index#Complexassignments","type":"Assignment"},{"name":"contains(element)","path":"index#contains(element)","type":"Builtin operators and functions"},{"name":"Convert to/from JSON","path":"index#Convertto/fromJSON","type":"Builtin operators and functions"},{"name":"Dates","path":"index#Dates","type":"Builtin operators and functions"},{"name":"debug","path":"index#debug","type":"I/O"},{"name":"Defining Functions","path":"index#DefiningFunctions","type":"Advanced features"},{"name":"del(path_expression)","path":"index#del(path_expression)","type":"Builtin operators and functions"},{"name":"delpaths(PATHS)","path":"index#delpaths(PATHS)","type":"Builtin operators and functions"},{"name":"Destructuring Alternative Operator: ?//","path":"index#DestructuringAlternativeOperator:?//","type":"Advanced features"},{"name":"empty","path":"index#empty","type":"Builtin operators and functions"},{"name":"endswith(str)","path":"index#endswith(str)","type":"Builtin operators and functions"},{"name":"Error Suppression / Optional Operator: ?","path":"index#ErrorSuppression/OptionalOperator:?","type":"Conditionals and Comparisons"},{"name":"error(message)","path":"index#error(message)","type":"Builtin operators and functions"},{"name":"explode","path":"index#explode","type":"Builtin operators and functions"},{"name":"first(expr), last(expr), nth(n; expr)","path":"index#first(expr),last(expr),nth(n;expr)","type":"Advanced features"},{"name":"first, last, nth(n)","path":"index#first,last,nth(n)","type":"Advanced features"},{"name":"flatten, flatten(depth)","path":"index#flatten,flatten(depth)","type":"Builtin operators and functions"},{"name":"floor","path":"index#floor","type":"Builtin operators and functions"},{"name":"foreach","path":"index#foreach","type":"Advanced features"},{"name":"Format strings and escaping","path":"index#Formatstringsandescaping","type":"Builtin operators and functions"},{"name":"fromstream(stream_expression)","path":"index#fromstream(stream_expression)","type":"Streaming"},{"name":"Generators and iterators","path":"index#Generatorsanditerators","type":"Advanced features"},{"name":"Generic Object Index: .[<string>]","path":"index#GenericObjectIndex:.[<string>]","type":"Basic filters"},{"name":"getpath(PATHS)","path":"index#getpath(PATHS)","type":"Builtin operators and functions"},{"name":"group_by(path_expression)","path":"index#group_by(path_expression)","type":"Builtin operators and functions"},{"name":"gsub(regex; string), gsub(regex; string; flags)","path":"index#gsub(regex;string),gsub(regex;string;flags)","type":"Regular expressions (PCRE)"},{"name":"halt","path":"index#halt","type":"Builtin operators and functions"},{"name":"halt_error, halt_error(exit_code)","path":"index#halt_error,halt_error(exit_code)","type":"Builtin operators and functions"},{"name":"has(key)","path":"index#has(key)","type":"Builtin operators and functions"},{"name":"Identity: .","path":"index#Identity:.","type":"Basic filters"},{"name":"if-then-else","path":"index#if-then-else","type":"Conditionals and Comparisons"},{"name":"implode","path":"index#implode","type":"Builtin operators and functions"},{"name":"import RelativePathString as $NAME [<metadata>];","path":"index#importRelativePathStringas$NAME[<metadata>];","type":"Modules"},{"name":"import RelativePathString as NAME [<metadata>];","path":"index#importRelativePathStringasNAME[<metadata>];","type":"Modules"},{"name":"in","path":"index#in","type":"Builtin operators and functions"},{"name":"include RelativePathString [<metadata>];","path":"index#includeRelativePathString[<metadata>];","type":"Modules"},{"name":"index(s), rindex(s)","path":"index#index(s),rindex(s)","type":"Builtin operators and functions"},{"name":"indices(s)","path":"index#indices(s)","type":"Builtin operators and functions"},{"name":"infinite, nan, isinfinite, isnan, isfinite, isnormal","path":"index#infinite,nan,isinfinite,isnan,isfinite,isnormal","type":"Builtin operators and functions"},{"name":"input","path":"index#input","type":"I/O"},{"name":"inputs","path":"index#inputs","type":"I/O"},{"name":"input_filename","path":"index#input_filename","type":"I/O"},{"name":"input_line_number","path":"index#input_line_number","type":"I/O"},{"name":"inside","path":"index#inside","type":"Builtin operators and functions"},{"name":"isempty(exp)","path":"index#isempty(exp)","type":"Advanced features"},{"name":"join(str)","path":"index#join(str)","type":"Builtin operators and functions"},{"name":"keys, keys_unsorted","path":"index#keys,keys_unsorted","type":"Builtin operators and functions"},{"name":"length","path":"index#length","type":"Builtin operators and functions"},{"name":"limit(n; exp)","path":"index#limit(n;exp)","type":"Advanced features"},{"name":"ltrimstr(str)","path":"index#ltrimstr(str)","type":"Builtin operators and functions"},{"name":"map(x), map_values(x)","path":"index#map(x),map_values(x)","type":"Builtin operators and functions"},{"name":"match(val), match(regex; flags)","path":"index#match(val),match(regex;flags)","type":"Regular expressions (PCRE)"},{"name":"min, max, min_by(path_exp), max_by(path_exp)","path":"index#min,max,min_by(path_exp),max_by(path_exp)","type":"Builtin operators and functions"},{"name":"module <metadata>;","path":"index#module<metadata>;","type":"Modules"},{"name":"modulemeta","path":"index#modulemeta","type":"Modules"},{"name":"Multiplication, division, modulo: *, /, and %","path":"index#Multiplication,division,modulo:*,/,and%","type":"Builtin operators and functions"},{"name":"Object Construction: {}","path":"index#ObjectConstruction:{}","type":"Types and Values"},{"name":"Object Identifier-Index: .foo, .foo.bar","path":"index#ObjectIdentifier-Index:.foo,.foo.bar","type":"Basic filters"},{"name":"Optional Object Identifier-Index: .foo?","path":"index#OptionalObjectIdentifier-Index:.foo?","type":"Basic filters"},{"name":"Parenthesis","path":"index#Parenthesis","type":"Basic filters"},{"name":"path(path_expression)","path":"index#path(path_expression)","type":"Builtin operators and functions"},{"name":"paths, paths(node_filter), leaf_paths","path":"index#paths,paths(node_filter),leaf_paths","type":"Builtin operators and functions"},{"name":"Pipe: |","path":"index#Pipe:|","type":"Basic filters"},{"name":"Plain assignment: =","path":"index#Plainassignment:=","type":"Assignment"},{"name":"range(upto), range(from;upto) range(from;upto;by)","path":"index#range(upto),range(from;upto)range(from;upto;by)","type":"Builtin operators and functions"},{"name":"recurse(f), recurse, recurse(f; condition), recurse_down","path":"index#recurse(f),recurse,recurse(f;condition),recurse_down","type":"Builtin operators and functions"},{"name":"Recursion","path":"index#Recursion","type":"Advanced features"},{"name":"Recursive Descent: ..","path":"index#RecursiveDescent:..","type":"Types and Values"},{"name":"Reduce","path":"index#Reduce","type":"Advanced features"},{"name":"reverse","path":"index#reverse","type":"Builtin operators and functions"},{"name":"rtrimstr(str)","path":"index#rtrimstr(str)","type":"Builtin operators and functions"},{"name":"scan(regex), scan(regex; flags)","path":"index#scan(regex),scan(regex;flags)","type":"Regular expressions (PCRE)"},{"name":"Scoping","path":"index#Scoping","type":"Advanced features"},{"name":"select(boolean_expression)","path":"index#select(boolean_expression)","type":"Builtin operators and functions"},{"name":"setpath(PATHS; VALUE)","path":"index#setpath(PATHS;VALUE)","type":"Builtin operators and functions"},{"name":"sort, sort_by(path_expression)","path":"index#sort,sort_by(path_expression)","type":"Builtin operators and functions"},{"name":"split(regex; flags)","path":"index#split(regex;flags)","type":"Regular expressions (PCRE)"},{"name":"split(str)","path":"index#split(str)","type":"Builtin operators and functions"},{"name":"splits(regex), splits(regex; flags)","path":"index#splits(regex),splits(regex;flags)","type":"Regular expressions (PCRE)"},{"name":"SQL-Style Operators","path":"index#SQL-StyleOperators","type":"Builtin operators and functions"},{"name":"sqrt","path":"index#sqrt","type":"Builtin operators and functions"},{"name":"startswith(str)","path":"index#startswith(str)","type":"Builtin operators and functions"},{"name":"stderr","path":"index#stderr","type":"I/O"},{"name":"String interpolation - \\(foo)","path":"index#Stringinterpolation-\\(foo)","type":"Builtin operators and functions"},{"name":"sub(regex; tostring) sub(regex; string; flags)","path":"index#sub(regex;tostring)sub(regex;string;flags)","type":"Regular expressions (PCRE)"},{"name":"Subtraction: -","path":"index#Subtraction:-","type":"Builtin operators and functions"},{"name":"test(val), test(regex; flags)","path":"index#test(val),test(regex;flags)","type":"Regular expressions (PCRE)"},{"name":"tonumber","path":"index#tonumber","type":"Builtin operators and functions"},{"name":"tostream","path":"index#tostream","type":"Streaming"},{"name":"tostring","path":"index#tostring","type":"Builtin operators and functions"},{"name":"to_entries, from_entries, with_entries","path":"index#to_entries,from_entries,with_entries","type":"Builtin operators and functions"},{"name":"transpose","path":"index#transpose","type":"Builtin operators and functions"},{"name":"truncate_stream(stream_expression)","path":"index#truncate_stream(stream_expression)","type":"Streaming"},{"name":"try-catch","path":"index#try-catch","type":"Conditionals and Comparisons"},{"name":"type","path":"index#type","type":"Builtin operators and functions"},{"name":"unique, unique_by(path_exp)","path":"index#unique,unique_by(path_exp)","type":"Builtin operators and functions"},{"name":"until(cond; next)","path":"index#until(cond;next)","type":"Builtin operators and functions"},{"name":"Update-assignment: |=","path":"index#Update-assignment:|=","type":"Assignment"},{"name":"utf8bytelength","path":"index#utf8bytelength","type":"Builtin operators and functions"},{"name":"Variable / Symbolic Binding Operator: ... as $identifier | ...","path":"index#Variable/SymbolicBindingOperator:...as$identifier|...","type":"Advanced features"},{"name":"walk(f)","path":"index#walk(f)","type":"Builtin operators and functions"},{"name":"while(cond; update)","path":"index#while(cond;update)","type":"Builtin operators and functions"}],"types":[{"name":"Advanced features","count":12,"slug":"advanced-features"},{"name":"Assignment","count":4,"slug":"assignment"},{"name":"Basic filters","count":11,"slug":"basic-filters"},{"name":"Builtin operators and functions","count":66,"slug":"builtin-operators-and-functions"},{"name":"Conditionals and Comparisons","count":8,"slug":"conditionals-and-comparisons"},{"name":"I/O","count":6,"slug":"i-o"},{"name":"Modules","count":5,"slug":"modules"},{"name":"Regular expressions (PCRE)","count":8,"slug":"regular-expressions-pcre"},{"name":"Streaming","count":3,"slug":"streaming"},{"name":"Types and Values","count":3,"slug":"types-and-values"}]};